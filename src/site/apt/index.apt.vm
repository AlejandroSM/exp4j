	------
	Download exp4j
	------
	Frank Asseg
	------
	2014
	------


About

  exp4j is capable of evaluating expressions and functions in the real domain. It's a small (40KB) library without any external dependencies, that implements {{{http://en.wikipedia.org/wiki/Shunting-yard_algorithm}Dijkstra's Shunting Yard Algorithm}}.
  exp4j comes with a standard set of built-in functions and operators. Additionally users are able to create custom operations and functions.

** Version 0.4.0:
	As of Version 0.4.0 exp4j has been completely rewritten and a lot of API changes have been introduced. Please don't hate me for that ;). {{{http://www.objecthunter.net/exp4j/v0.3.11}The old version is still available}. Im currently planning to supply a legacy-pack with wrappers for the old API, but I'm not sure that it is feasible.
	The rewrite was IMHO necessary to accommodate various features (e.g. implicit multiplication) and first of all: Improved performance.
	Exp4j now only takes a 4 times as long as plain Java math to evaluate a simple expression on my local machine.

* Evaluate a simple expression:

+--
Expression e = new ExpressionBuilder("3 * sin(y) - 2 / (x - 2)")
        .build()
        .variable("x", 2.3)
        .variable("y", 3.14);
double result = e.evaluate();
+--

* Variable declaration

	Variable names must start with a letter or the underscore (_) and can only include letters, digits or underscores.
	
	the following are valid variable names:
	 * varX
	 * _x1
	 * _var_X_1
	 while for e.g. 1_var_x is not as it does not start with a letter or a underscore.

* Scientific notation

	Since version 0.3.5 it is possible to use scientific notation for numbers (see http://en.wikipedia.org/wiki/Scientific_notation).
	The number is split into a significand/mantissa (y) and exponent (x) of the form 'yEx' which is evaluated as 'y * 10^x'.
	Be aware that 'e/E' is no operator and therefore an expression like "1.1e-(x*2)" can not be evaluated. 
	An example using the Fine-structure constant 'α=7.2973525698  * 10^−3':
	 
+--
String expr = "7.2973525698e-3";
double expected = Double.parseDouble(expr);
Expression e = new ExpressionBuilder(expr).build();
assertEquals(expected, e.evaluate(),0d);
+--

* Custom functions

  	you can extend the abstract class Function in order to use custom functions in expressions. you only have to implement the
  	applyFunction(double[] values) method. 

In the following example a function for the logarithm to the base 2 is created and used in a following expression.
+--
Function log2 = new Function("log2", 1) {

    @Override
    public double apply(double... args) {
        return Math.log(args[0]) / Math.log(2);
    }
};
double result = new ExpressionBuilder("log2(4)")
        .function(log2)
        .build()
        .evaluate();

double expected = 2;
assertEquals(expected, result, 0d);
+--

	you can also define multi argument functions like max(a,b,c) via the constructor Function(String name, int argc), with argc being the argument count.
	The following example uses a custom function which returns the average of four values.
	
+--
Function avg = new Function("avg", 4) {

    @Override
    public double apply(double... args) {
        double sum = 0;
        for (double arg : args) {
            sum += arg;
        }
        return sum / args.length;
    }
};
double result = new ExpressionBuilder("avg(1,2,3,4)")
        .function(avg)
        .build()
        .evaluate();

double expected = 2.5d;
assertEquals(expected, result, 0d);

+--  	

* Custom operators

	you can extend the abstract class CustomOperator in order to declare custom operators for use in expressions, with the symbol being one of 
	!,#,§,$,&,;,:,~,\<,\>,|,=. Be aware that adding a CustomOperator with a used symbol overwrites any existing operators including the builtin ones. So it's possible to overwrite e.g. the '+' operator.
	The Constructor of a CustomOperator takes up to 4 arguments:
	
 * the symbol used for this operation (one of !,#,§,$,&,;,:,~,\<,\>,|,=)
 
 * if the operation is left associative
 
 * the precedence of the operation
 
 * the number of operands the operator has (1 or 2) 

In the following example an Operator is created to calculate the factorial of a number.
+--
Operator factorial = new Operator("!", 1, true, Operator.PRECEDENCE_POWER + 1) {

    @Override
    public double apply(double... args) {
        final int arg = (int) args[0];
        if ((double) arg != args[0]) {
            throw new IllegalArgumentException("Operand for factorial has to be an integer");
        }
        if (arg < 0) {
            throw new IllegalArgumentException("The operand of the factorial can not be less than zero");
        }
        double result = 1;
        for (int i = 1; i <= arg; i++) {
            result *= i;
        }
        return result;
    }
};

double result = new ExpressionBuilder("3!")
        .operator(factorial)
        .build()
        .evaluate();

double expected = 6d;
assertEquals(expected, result, 0d);

+--

* Built-in operators
	 
	 
 * Addition: '2 + 2'
 
 * Subtraction: '2 - 2'
 
 * Multiplication: '2 * 2'
 
 * Division: '2 / 2'
 
 * Exponentation: '2 ^ 2'
 
 * Unary Minus,Plus (Sign Operators): '+2 - (-2)'
 
 * Modulo: '2 % 2'
 

* Precedence of unary minus and power operators

	The precedence of the unary minus operator is lower than the precedence of the power operator. This means that an expression like "-1^2" is evaluated as "-(1^2)" not "(-1)^2"


* Division by zero in operations and functions
	
	exp4j throws a ArithmeticException when a division by zero is attempted. When implementing CustomOperator or CustomFunction involving divisions the implementor has to make sure that a corresponding RuntimeException is thrown.
	The following example from the exp4j sources shows how to check for such a condition.
	
+--

		CustomOperator mod = new CustomOperator("%", true, 3) {
			@Override
			protected double applyOperation(double[] values) {
				if (values[1] == 0d){
					throw new ArithmeticException("Division by zero!");
				}
				return values[0] % values[1];
			}
		};


+--

	 
* Built-in functions
	 
	 
 * abs: absolute value
 
 * acos: arc cosine
 
 * asin: arc sine
 
 * atan: arc tangent
 
 * cbrt: cubic root
 
 * ceil: nearest upper integer
 
 * cos: cosine
 
 * cosh: hyperbolic cosine
 
 * exp: euler's number raised to the power (e^x)
 
 * floor: nearest lower integer
 
 * log: logarithmus naturalis (base e)
 
 * sin: sine
 
 * sinh: hyperbolic sine
 
 * sqrt: square root
 
 * tan: tangent
 
 * tanh: hyperbolic tangent
 

* API changes

 * Version 0.3.2: choice for unary minus precedence via System property

 * Version 0.3.0: implicit variable declarations á la "f(x)=2x" have been removed
 
 * Version 0.3.0: PostfixExpression API has been removed
 
 * Version 0.3.0: The CustomOperator API has been added
  	
 * Version 0.2.5: the argument type for CustomFunction changed from double to double[] with an array holding the arguments of the function call, in order to allow multi argument functions like max(x,y,z)
 
 * Version 0.2.2: the PostfixExpression API has been marked deprecated.
 
 * Version 0.2.1: the CustomFunction API has been added
 
 * Version 0.2.0: the ExpressionBuilder/Calculable API has been added
 

* Links
 
 * {{{http://objecthunter.congrace.de/tinybo/blog/articles/86}exp4j intro}}
 
 * {{{http://objecthunter.congrace.de/tinybo/blog/articles/94}exp4j update 0.2.x}}
 
 * {{{http://www.javierllamas.es/index.php/en/blog/14-interprete-de-formulas-para-java.html}Javier Llamas}} blogged about exp4j
 
 * {{{http://zi-o.ro/exp4j-or-excel-like-math-for-java-building-a-calculator-02102011/}Catalin Alexandru}} blogged about exp4j
 
 * {{{http://simplesassim.wordpress.com/?s=exp4j}Fernando Ribeiro}} blogged about exp4j
  

* References
 
 * {{{http://nilgiri.net/twiki/bin/view/Nilgiri/}Nilgiri}} MUD uses exp4j
 
 * {{{http://jamwiki.org}JamWiki}} a java based wiki uses exp4j
 
 * {{{http://zi-o.ro/exp4j-or-excel-like-math-for-java-building-a-calculator-02102011/}Catalin Alexandru}} blogged about exp4j
 
 * {{{http://code.google.com/p/jcomplexity/}JComplexity}} for algortihm comparison uses exp4j
 
 * {{{http://www.opensourceautomation.net/}free\{dom\}}} building automation framework uses exp4j
 
 * {{{http://jwork.org/jhepwork/}jHepWork}} a Multiplatform environment for scientific computation and data analysis uses exp4j
 
 * {{{http://code.google.com/p/calc3d/}cacl3d}} a 3d calculus visualisation engine uses exp4j.
 

 Please {{{mailto:fas@congrace.de}let me know}} if you're project uses exp4j and you want it listed here
